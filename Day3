{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "97e7f964",
   "metadata": {},
   "source": [
    "# Welcome to IGNITE™ Pathways Python Summer Camp - Session 3\n",
    "### Topic: Libraries, Conditionals, Loops, and Random Static Target"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "047f4cc7",
   "metadata": {},
   "source": [
    "## 📲 Part 1: What Are Libraries?\n",
    "In Python, **libraries** are collections of pre-written code. They help you avoid writing everything from scratch and make coding easier and faster.\n",
    "\n",
    "Examples today:\n",
    "- **random**: for randomness (e.g., random numbers, choices)\n",
    "- **time**: for adding delays and working with time\n",
    "- **os**: for working with folders and files\n",
    "- **sys**: for system functions (like quitting your program)\n",
    "- **pygame**: for building games (graphics, sounds, input)\n",
    "\n",
    "You use the `import` keyword to bring a library into your program."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c822b796",
   "metadata": {},
   "source": [
    "## 📲 Part 2: Importing Libraries\n",
    "### Example: Import and use the random library to generate a random number:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2a1b40da",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "\n",
    "random_number = random.randint(1, 10)\n",
    "print(\"Your random number is:\", random_number)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f4424adf",
   "metadata": {},
   "source": [
    "🚀 Exercise: Import time and use time.sleep() to pause your code for 2 seconds before printing a message.\n",
    "\n",
    "📂 Your turn below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "15cecfa7",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "639f97c3",
   "metadata": {},
   "source": [
    "## 📲 Part 3: Operators & Expressions\n",
    "**Operators** are special symbols in Python used to perform operations:\n",
    "- Arithmetic Operators: +, -, *, /, %\n",
    "- Comparison Operators: ==, !=, <, >, <=, >=\n",
    "- Logical Operators: and, or, not"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "57d2b820",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(5 + 3)  # Addition\n",
    "print(10 - 4) # Subtraction\n",
    "print(2 * 3)  # Multiplication\n",
    "print(8 / 2)  # Division\n",
    "\n",
    "print(5 == 5)  # Equal\n",
    "print(7 != 3)  # Not equal\n",
    "print(10 > 5)  # Greater than\n",
    "print(4 <= 4)  # Less than or equal\n",
    "\n",
    "print(True and False)\n",
    "print(True or False)\n",
    "print(not False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f89447d8",
   "metadata": {},
   "source": [
    "🚀 Exercise: Check if a number is between 5 and 15 using operators.\n",
    "\n",
    "📂 Your turn below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f834e64c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "cef8568c",
   "metadata": {},
   "source": [
    "## 📲 Part 4: Conditionals (if, elif, else)\n",
    "**Conditionals** let your program make decisions based on certain conditions. Use `if`, `elif`, and `else` to check conditions and run different code blocks."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "05d97c0d",
   "metadata": {},
   "outputs": [],
   "source": [
    "number = 7\n",
    "\n",
    "if number < 5:\n",
    "    print(\"Number is less than 5.\")\n",
    "elif number < 10:\n",
    "    print(\"Number is between 5 and 10.\")\n",
    "else:\n",
    "    print(\"Number is 10 or more.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7950ce1b",
   "metadata": {},
   "source": [
    "🚀 Exercise: Change 'number' to test different conditions.\n",
    "\n",
    "📂 Your turn below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8a99a994",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "3596bc3c",
   "metadata": {},
   "source": [
    "## 📲 Part 5: Loops (for and while)\n",
    "**Loops** let you repeat code multiple times:\n",
    "- **while loop**: repeats while a condition is True.\n",
    "- **for loop**: repeats over a list or range."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5ca9bd44",
   "metadata": {},
   "outputs": [],
   "source": [
    "counter = 1\n",
    "while counter <= 5:\n",
    "    print(\"Count:\", counter)\n",
    "    counter += 1\n",
    "\n",
    "for color in [\"red\", \"blue\", \"green\"]:\n",
    "    print(\"Color:\", color)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3fa60586",
   "metadata": {},
   "source": [
    "🚀 Exercise: Use a while loop to count down from 5 to 1.\n",
    "\n",
    "📂 Your turn below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "28ea23f7",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "fd027622",
   "metadata": {},
   "source": [
    "## 📲 Part 6: Randomness with random Library"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "875264eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "colors = [\"red\", \"blue\", \"green\", \"yellow\"]\n",
    "selected_color = random.choice(colors)\n",
    "print(\"Selected color:\", selected_color)\n",
    "\n",
    "random_score = random.randint(50, 100)\n",
    "print(\"Random score:\", random_score)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "085b10e8",
   "metadata": {},
   "source": [
    "🚀 Exercise: Use random.choice() to randomly pick your favorite snack.\n",
    "\n",
    "📂 Your turn below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d7f6a68d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "cad21bc4",
   "metadata": {},
   "source": [
    "## 📲 Part 7: Project – Guess the Number Game\n",
    "Build a game where the player keeps guessing until correct."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "40bc73d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "secret_number = random.randint(1, 10)\n",
    "guess = None\n",
    "\n",
    "while guess != secret_number:\n",
    "    guess = int(input(\"Guess a number between 1 and 10: \"))\n",
    "    if guess == secret_number:\n",
    "        print(\"Congratulations! You guessed correctly.\")\n",
    "    elif guess < secret_number:\n",
    "        print(\"Too low!\")\n",
    "    else:\n",
    "        print(\"Too high!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d2d8c8a",
   "metadata": {},
   "source": [
    "📂 Your turn below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8f14e338",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "8ec09b27",
   "metadata": {},
   "source": [
    "## 📲 PART 8: CAPSTONE PROJECT - Part 3\n",
    "Now, in your archery game, display a static random target using random.choice()."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a4873b1e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pygame\n",
    "import sys\n",
    "import os\n",
    "import time\n",
    "import random\n",
    "\n",
    "def setup_display():\n",
    "    WIDTH, HEIGHT = 800, 600\n",
    "    screen = pygame.display.set_mode((WIDTH, HEIGHT))\n",
    "    pygame.display.set_caption(\"Archery Game 🏹\")\n",
    "    return screen, WIDTH, HEIGHT\n",
    "\n",
    "def load_game_assets():\n",
    "    try:\n",
    "        background = pygame.image.load('sprites/sunset.png')\n",
    "        archer = pygame.image.load('sprites/archer.png')\n",
    "        red_target = pygame.image.load('sprites/red_target.png')\n",
    "        blue_target = pygame.image.load('sprites/bluetarget.png')\n",
    "        print(\"Assets loaded successfully!\")\n",
    "        return background, archer, red_target, blue_target\n",
    "    except:\n",
    "        print(\"Error loading images! Check your folders.\")\n",
    "        return None, None, None, None\n",
    "\n",
    "pygame.init()\n",
    "screen, WIDTH, HEIGHT = setup_display()\n",
    "background, archer, red_target, blue_target = load_game_assets()\n",
    "\n",
    "chosen_target = random.choice([red_target, blue_target])\n",
    "\n",
    "running = True\n",
    "while running:\n",
    "    for event in pygame.event.get():\n",
    "        if event.type == pygame.QUIT:\n",
    "            running = False\n",
    "\n",
    "    if background and archer and chosen_target:\n",
    "        screen.blit(background, (0, 0))\n",
    "        screen.blit(archer, (WIDTH//2 - 50, HEIGHT - 120))\n",
    "        screen.blit(chosen_target, (WIDTH//2 - 30, HEIGHT//2 - 30))\n",
    "\n",
    "    pygame.display.flip()\n",
    "\n",
    "pygame.quit()"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 5
}
